services:
  # postgres service
  agent-postgres:
    image: pgvector/pgvector:0.8.0-pg17
    restart: always
    volumes:
      - ${HOME}/.ayaos/dbdata:/var/lib/postgresql/data
      - ${HOME}/.ayaos:/data
    entrypoint: >
      bash -c '
      if [ ! -f "/data/db.env" ]; then
          echo "Generating new db.env file..."
          echo "POSTGRES_USER=agentcoin" > /data/db.env
          echo "POSTGRES_DB=agentcoin" >> /data/db.env
          echo "POSTGRES_PASSWORD=$$(openssl rand -hex 32)" >> /data/db.env
          chmod 600 /data/db.env;
      fi;
      set -a;
      source /data/db.env;
      set +a;
      exec docker-entrypoint.sh postgres
      '
    networks:
      - skynet
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U agentcoin -d agentcoin']
      interval: 5s
      timeout: 5s
      retries: 10

  # ayaos process
  agent:
    image: avp1598/ayaos:latest
    restart: always
    working_dir: /root/.ayaos/code
    command: ['bun', 'run', 'agent']
    networks:
      - skynet
    volumes:
      - ${HOME}/.ayaos:/root/.ayaos
    depends_on:
      - agent-sentinel
      - agent-postgres

  # agent sentinel process
  agent-sentinel:
    image: avp1598/ayaos:latest
    restart: always
    working_dir: /root/sentinel
    command: ['bun', 'run', 'agent']
    networks:
      - skynet
    volumes:
      - ${HOME}/.ayaos:/root/.ayaos

  # watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 --cleanup agent-runtime agent-sentinel
    networks:
      - skynet

networks:
  skynet:
    driver: bridge
    internal: false
